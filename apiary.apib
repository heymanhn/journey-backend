FORMAT: 1A
HOST: http://journeyapp.no-domain-yet.com/v1

# Journey

Journey helps you organize your trips, allowing you to maximize your experiences at every destination you visit and to relive those moments when you return home.

The Journey API allows consumers to access and create trips, which contain lists of places users want to go for their destinations.


## Authentication [/login]

Journey uses JSON Web Tokens for the API server's authentication. This means the server does not maintain sessions for each connection. Once the server authenticates a client and provides a JSON Web Token, all subsequent API requests (except for user account creation) need to include that token in the HTTP `Authorization` header.

### Login [POST]

Log in with either a username or email, as well as the password. The API returns the user object and a JSON Web Token if authentication is successful.

+ Request (application/json)

        {
            "username": "amy",
            "password": "abc123"
        }

+ Response 200 (application/json)

        {
            "user": {
                "_id": "57733624ed070136a557dddd",
                "username": "amy",
                "email": "amy@journey.com",
                "name": "Amy Doe",
                "__v": 0,
                "signupDate": "2016-06-29T02:44:52.928Z"
            },
            "token": "JWT <JWT_TOKEN>"
        }


## User Management [/users]

### User Sign Up [POST]

Create a new user account. Requires user to provide a username, email, and password. Optionally, user can provide a full name.

The API returns the user object and a JSON Web Token if account creation is successful, meaning that the user will already be logged in.

+ Request (application/json)

        {
            "username": "amy",
            "email": "amy@journey.com",
            "password": "abc123",
            "name": "Amy Doe"
        }

+ Response 200 (application/json)

        {
            "user": {
                "_id": "57733624ed070136a557dddd",
                "username": "amy",
                "email": "amy@journey.com",
                "name": "Amy Doe",
                "__v": 0,
                "signupDate": "2016-07-27T02:44:52.928Z"
            },
            "token": "JWT <JWT_TOKEN>"
        }

### Get User Information [GET /users/{userId}]

Retrieve information about a user. Only allowed on currently authenticated user.

+ Parameters
    + userId (string) - User ID to fetch information for.

+ Response 200 (application/json)

        {
            "user": {
                "_id": "57733624ed070136a557dddd",
                "username": "amy",
                "email": "amy@journey.com",
                "name": "Amy Doe",
                "__v": 0,
                "signupDate": "2016-07-27T02:44:52.928Z"
            }
        }

### Update User Information [PUT /users/{userId}]

Updates the user. Only allowed on currently authenticated user.

+ Parameters
    + userId (string) - User ID to update information for.

+ Request (application/json)

        {
            "email": "amy.doe@journey.com",
            "name": "Amy Emily Doe"
        }

+ Response 200 (application/json)

        {
            "user": {
                "_id": "57733624ed070136a557dddd",
                "username": "amy",
                "email": "amy.doe@journey.com",
                "name": "Amy Emily Doe",
                "__v": 0,
                "signupDate": "2016-07-27T02:44:52.928Z"
            }
        }

### Get User's trips [GET /users/{userId}/trips?page={page}]

Get all the trips created by the currently authenticated user, in reverse chronological order. Only a subset of each trip object is returned in this route. To get full details about the trip, use GET /trips/{tripId}.

+ Parameters
    + userId (string) - User ID to get entries for.
    + page (number) - Page # to return based on every page of 10 trips.

+ Response 200 (application/json)

        {
            "page": 1,
            "results": 2,
            "trips": [
                {
                    "_id": "578edda250b26fc5d3c6baa8",
                    "creator": "5785e22fdff4328371f8e781",
                    "title": "Paris and Marseille",
                    "startDate": "2016-08-15"
                    "endDate": "2016-08-20",
                    "destinations": [
                        "Paris, France",
                        "Marseille, France"
                    ],
                    "visibility": "private"
                },
                {
                    "_id": "578edda250b26fc5d3c6baa9",
                    "creator": "5785e22fdff4328371f8e781",
                    "title": "Amy and Adam Take Vietnam!",
                    "startDate": "2016-09-22"
                    "endDate": "2016-09-27",
                    "destinations": [
                        "Vietnam"
                    ],
                    "visibility": "public"
                }
            ]
        }

### Get User's entries [GET /users/{userId}/entries?count={count}&page={page}&maxDate={maxDate}]

Get all journey entries created by the currently authenticated user, in reverse chronological order.

+ Parameters
    + userId (string) - User ID to get entries for.
    + count (number) - Number of items to return. Default is 20
    + page (number) - Page # to return based on the count per page.
    + maxDate (string) - Cut-off date for first entry to return, in ISODate format

+ Response 200 (application/json)

        {
            "page": 1,
            "results": 2,
            "entries": [
                {
                    "_id": "578ede2a50b26fc5d3c6baaa",
                    "creator": "5785e22fdff4328371f8e781",
                    "type": "video",
                    "message": "And here's a video showing him scooting around",
                    "contents": "https://s3-us-west-1.amazonaws.com/journey.media/4daba8e3-78c4-4ef2-b187-06b9d97b3228",
                    "__v": 0,
                    "loc": {
                        "type": "Point",
                        "coordinates": [
                            -122.431301,
                            37.773233
                        ]
                    },
                    "date": "2016-07-20T02:12:58.332Z"
                },
                {
                    "_id": "578edda250b26fc5d3c6baa8",
                    "creator": "5785e22fdff4328371f8e781",
                    "type": "photo",
                    "message": "Check out this cute picture of Mochi!",
                    "contents": "https://s3-us-west-1.amazonaws.com/journey.media/e7b5b426-0d6b-4325-9d4e-8d2ba6fc8502",
                    "__v": 0,
                    "loc": {
                        "type": "Point",
                        "coordinates": [
                            -122.431301,
                            37.773224
                        ]
                    },
                    "date": "2016-07-20T02:10:42.442Z"
                }
            ]
        }


## Trip Management [/trips]

Users can create and manage trips on the Journey app. Each trip specifies a list of destinations that the user is visiting, as well as a list of places the user wants to visit (ideas) and a concrete trip plan to execute.

Each trip includes the following properties:

* `date` - Date created
* `creator` - User who created the trip
* `title`
* `destinations` - A list of cities/countries/continents the user will be visiting
* `ideas` - A list of places the user wants to visit
* (COMING SOON) `plan` - An itinerary for the trip, composed of places the user has decided to visit
* `visibility` - whether or not the trip is publicly visilble

### Create a trip [POST]

Creates a new trip. Only `title` is required during creation. Returns the newly created trip upon success.

+ Request (application/json)

        {
            "title": "Paris and Marseille",
            "startDate": "2016-08-15"
            "endDate": "2016-08-20",
            "destinations": [
                "Paris, France",
                "Marseille, France"
            ],
            "visibility": "private"
        }

+ Response 200 (application/json)

        {
            "trip": {
                "_id": "578edda250b26fc5d3c6baa8",
                "creator": "5785e22fdff4328371f8e781",
                "title": "Paris and Marseille",
                "startDate": "2016-08-15"
                "endDate": "2016-08-20",
                "destinations": [
                    "Paris, France",
                    "Marseille, France"
                ],
                "ideas": [],
                "plan": [],
                "visibility": "private"
            }
        }

### Get a trip [GET /trips/{tripId}]

Gets details about a particular trip created by the currently authenticated user. Returns the full details about the trip.

+ Parameters
    + tripId (string) - Trip ID to get details for.

+ Response 200 (application/json)

        {
            "trip": {
                "_id": "578edda250b26fc5d3c6baa8",
                "creator": "5785e22fdff4328371f8e781",
                "title": "Paris and Marseille",
                "startDate": "2016-08-15"
                "endDate": "2016-08-20",
                "destinations": [
                    "Paris, France",
                    "Marseille, France"
                ],
                "ideas": [],
                "plan": [],
                "visibility": "private"
            }
        }

### Update a trip [PUT /trips/{tripId}]

Updates the trip. Only allowed on trips created by currently authenticated user.

+ Parameters
    + tripId (string) - Trip ID to update.

+ Request (application/json)

        {
            "title": "Amy goes to Paris and Marseille",
            "startDate": "2016-08-12",
            "destinations": [
                "Paris, France",
                "Marseille, France",
                "Nice, France"
            ]
        }

+ Response 200 (application/json)

        {
            "trip": {
                "_id": "578edda250b26fc5d3c6baa8",
                "creator": "5785e22fdff4328371f8e781",
                "title": "Amy goes to Paris and Marseille",
                "startDate": "2016-08-12"
                "endDate": "2016-08-20",
                "destinations": [
                    "Paris, France",
                    "Marseille, France",
                    "Nice, France"
                ],
                "ideas": [],
                "plan": [],
                "visibility": "private"
            }
        }

### Delete a trip [DELETE /trips/{tripId}]

Deletes the trip. Only allowed on trips created by currently authenticated user.

+ Parameters
    + tripId (string) - Trip ID to delete.

+ Response 200 (application/json)

        {
            "message": "Trip deleted."
        }


## Journey Entries [/entries]

The concept of journey entries may be deprecated as I transition the app towards a trip planning experience.

Each journey entry includes the following:

* Date created
* User who created it
* a location (lat/lng coordinates)
* an entry type (text, photos, video, audio)
* entry contents (URL to media saved to Amazon S3)
* a message (required for text entries)

### Create an entry [POST]

Create a journey entry. Returns an updated list of the user's entries upon successful creation.

* The type of the entry is required.
* Contents is required if the user is creating a `video`, `audio`, or `photo` entry.
* Message is required if the user is creating a `text` entry.

+ Request (application/json)

        {
            "type": "photo",
            "contents": "http://s3.amazon.com/journey/photo.jpg",
            "message": "Picture of Amy and Adam!",
            "loc": {
                "type": "Point",
                "coordinates": [
                    -122.431397,
                    37.773982
                ]
            }
        }

+ Response 200 (application/json)

        {
            "page": 1,
            "results": 3,
            "entries": [
                {
                    "_id": "578ede2a50b26fc5d3c6badd",
                    "creator": "5785e22fdff4328371f8e781",
                    "type": "photo",
                    "message": "Picture of Amy and Adam!",
                    "contents": "http://s3.amazon.com/journey/photo.jpg",
                    "__v": 0,
                    "loc": {
                        "type": "Point",
                        "coordinates": [
                            -122.431397,
                            37.773982
                        ]
                    },
                    "date": "2016-07-27T15:02:57.912Z"
                },
                {
                    "_id": "578ede2a50b26fc5d3c6baaa",
                    "creator": "5785e22fdff4328371f8e781",
                    "type": "video",
                    "message": "And here's a video showing him scooting around",
                    "contents": "https://s3-us-west-1.amazonaws.com/journey.media/4daba8e3-78c4-4ef2-b187-06b9d97b3228",
                    "__v": 0,
                    "loc": {
                        "type": "Point",
                        "coordinates": [
                            -122.431301,
                            37.773233
                        ]
                    },
                    "date": "2016-07-20T02:12:58.332Z"
                },
                {
                    "_id": "578edda250b26fc5d3c6baa8",
                    "creator": "5785e22fdff4328371f8e781",
                    "type": "photo",
                    "message": "Check out this cute picture of Mochi!",
                    "contents": "https://s3-us-west-1.amazonaws.com/journey.media/e7b5b426-0d6b-4325-9d4e-8d2ba6fc8502",
                    "__v": 0,
                    "loc": {
                        "type": "Point",
                        "coordinates": [
                            -122.431301,
                            37.773224
                        ]
                    },
                    "date": "2016-07-20T02:10:42.442Z"
                }
            ]
        }

### Get an entry [GET /entries/{entryId}]

Fetches details for a specific entry created by the currently authenticated user.

+ Parameters
    + entryId (string) - Entry ID

+ Response 200 (application/json)

        {
            "entry": {
                "_id": "578edda250b26fc5d3c6baa8",
                "creator": "5785e22fdff4328371f8e781",
                "type": "photo",
                "message": "Check out this cute picture of Mochi!",
                "contents": "https://s3-us-west-1.amazonaws.com/journey.media/e7b5b426-0d6b-4325-9d4e-8d2ba6fc8502",
                "__v": 0,
                "loc": {
                    "type": "Point",
                    "coordinates": [
                        -122.431301,
                        37.773224
                    ]
                },
                "date": "2016-07-20T02:10:42.442Z"
            }
        }

### Delete an entry [DELETE /entries/{entryId}]

Removes an entry, first confirming that the entry was created by the current user. The contents are also deleted from S3 if they exist.

+ Parameters
    + entryId (string) - Entry ID

+ Response 200 (application/json)

        {
            "message": "Entry deleted."
        }
