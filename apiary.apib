FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Journey

Journey helps you organize your trips, allowing you to maximize your experiences at every destination you visit and to relive those moments when you return home.

The Journey API allows consumers to access and create trips, which contain lists of places users want to go for their destinations.


## Authentication [/login]

Journey uses JSON Web Tokens for the API server's authentication. This means the server does not maintain sessions for each connection. Once the server authenticates a client and provides a JSON Web Token, all subsequent API requests (except for user account creation) need to include that token in the HTTP `Authorization` header.

### Login [POST]

Log in with either a username or email, as well as the password. The API returns the user object and a JSON Web Token if authentication is successful.

+ Request (application/json)

        {
            "username": "amy",
            "password": "abc123"
        }

+ Response 200 (application/json)

        {
            "user": {
                "_id": "57733624ed070136a557dddd",
                "username": "amy",
                "email": "amy@journey.com",
                "name": "Amy Doe",
                "__v": 0,
                "signupDate": "2016-06-29T02:44:52.928Z"
            },
            "token": "JWT <JWT_TOKEN>"
        }


## User Management [/users]

### User Sign Up [POST]

Create a new user account. Requires user to provide a username, email, and password. Optionally, user can provide a full name.

The API returns the user object and a JSON Web Token if account creation is successful, meaning that the user will already be logged in.

+ Request (application/json)

        {
            "username": "amy",
            "email": "amy@journey.com",
            "password": "abc123",
            "name": "Amy Doe"
        }

+ Response 200 (application/json)

        {
            "user": {
                "_id": "57733624ed070136a557dddd",
                "username": "amy",
                "email": "amy@journey.com",
                "name": "Amy Doe",
                "__v": 0,
                "signupDate": "2016-07-27T02:44:52.928Z"
            },
            "token": "JWT <JWT_TOKEN>"
        }

### Get User Information [GET /users/{userId}]

Retrieve information about a user. Only allowed on currently authenticated user.

+ Parameters
    + userId (string) - User ID to fetch information for.

+ Response 200 (application/json)

        {
            "user": {
                "_id": "57733624ed070136a557dddd",
                "username": "amy",
                "email": "amy@journey.com",
                "name": "Amy Doe",
                "__v": 0,
                "signupDate": "2016-07-27T02:44:52.928Z"
            }
        }

### Update User Information [PUT /users/{userId}]

Updates the user. Only allowed on currently authenticated user.

+ Parameters
    + userId (string) - User ID to update information for.

+ Request (application/json)

    {
        "email": "amy.doe@journey.com",
        "name": "Amy Emily Doe"
    }

+ Response 200 (application/json)

        {
            "user": {
                "_id": "57733624ed070136a557dddd",
                "username": "amy",
                "email": "amy.doe@journey.com",
                "name": "Amy Emily Doe",
                "__v": 0,
                "signupDate": "2016-07-27T02:44:52.928Z"
            }
        }

### Get User's Entries [GET /users/{userId}/entries]

Get all journey entries created by this user, in reverse chronological order.

+ Parameters
    + userId (string) - User ID to get entries for.
    + count (number) - Number of items to return. Default is 20
    + page (number) - Page # to return based on the count per page.
    + maxDate (string) - Cut-off date for first entry to return, in ISODate format

+ Response 200 (application/json)

        {
            "page": 1,
            "results": 2,
            "entries": [
                {
                    "_id": "578ede2a50b26fc5d3c6baaa",
                    "creator": "5785e22fdff4328371f8e781",
                    "type": "video",
                    "message": "And here's a video showing him scooting around",
                    "contents": "https://s3-us-west-1.amazonaws.com/journey.media/4daba8e3-78c4-4ef2-b187-06b9d97b3228",
                    "__v": 0,
                    "loc": {
                        "type": "Point",
                        "coordinates": [
                            -122.431301,
                            37.773233
                        ]
                    },
                    "date": "2016-07-20T02:12:58.332Z"
                },
                {
                    "_id": "578edda250b26fc5d3c6baa8",
                    "creator": "5785e22fdff4328371f8e781",
                    "type": "photo",
                    "message": "Check out this cute picture of Mochi!",
                    "contents": "https://s3-us-west-1.amazonaws.com/journey.media/e7b5b426-0d6b-4325-9d4e-8d2ba6fc8502",
                    "__v": 0,
                    "loc": {
                        "type": "Point",
                        "coordinates": [
                            -122.431301,
                            37.773224
                        ]
                    },
                    "date": "2016-07-20T02:10:42.442Z"
                }
            ]
        }

